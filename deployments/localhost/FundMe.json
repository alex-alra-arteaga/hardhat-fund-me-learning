{
    "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "abi": [
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "priceFeedAddress",
                    "type": "address"
                }
            ],
            "stateMutability": "nonpayable",
            "type": "constructor"
        },
        {
            "inputs": [],
            "name": "FundMe__NotOwner",
            "type": "error"
        },
        {
            "stateMutability": "payable",
            "type": "fallback"
        },
        {
            "inputs": [],
            "name": "cheaperWithdraw",
            "outputs": [],
            "stateMutability": "payable",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "fund",
            "outputs": [],
            "stateMutability": "payable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "funder",
                    "type": "address"
                }
            ],
            "name": "getAddressToAmountFunded",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "index",
                    "type": "uint256"
                }
            ],
            "name": "getFunder",
            "outputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "getOwner",
            "outputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "getPriceFeed",
            "outputs": [
                {
                    "internalType": "contract AggregatorV3Interface",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "minimumUsd",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "name": "s_addressToAmountFunded",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "name": "s_funders",
            "outputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "s_priceFeed",
            "outputs": [
                {
                    "internalType": "contract AggregatorV3Interface",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "withdraw",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "stateMutability": "payable",
            "type": "receive"
        }
    ],
    "transactionHash": "0xaf6c77b71825c288804d8051beada9a3e1f0302cbd94864f9c480e35c671f8d2",
    "receipt": {
        "to": null,
        "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
        "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
        "transactionIndex": 0,
        "gasUsed": "1083968",
        "logsBloom": "0x
        "blockHash": "0xbea8d8cbcf0c44f45d73251cb7d9e39639a8e6ec9918868d20901031edd432ed",
        "transactionHash": "0xaf6c77b71825c288804d8051beada9a3e1f0302cbd94864f9c480e35c671f8d2",
        "logs": [],
        "blockNumber": 2,
        "cumulativeGasUsed": "1083968",
        "status": 1,
        "byzantium": true
    },
    "args": ["0x5FbDB2315678afecb367f032d93F642f64180aa3"],
    "numDeployments": 1,
    "solcInputHash": "17a4e7f948460b7ceb78b80082c32543",
    "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceFeedAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FundMe__NotOwner\",\"type\":\"error\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"cheaperWithdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"funder\",\"type\":\"address\"}],\"name\":\"getAddressToAmountFunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getFunder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumUsd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"s_addressToAmountFunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"s_funders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_priceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"fund()\":{\"details\":\"This implements price feeds as our library\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"fund()\":{\"notice\":\"This function funds this contract\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundMe.sol\":\"FundMe\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0x6e6e4b0835904509406b070ee173b5bc8f677c19421b76be38aea3b1b3d30846\",\"license\":\"MIT\"},\"contracts/FundMe.sol\":{\"content\":\"//Get funds from users\\n//Withdraw funds\\n//Set a minimum funding value in USD\\n\\n// SPDX-License-Identifier: MIT\\n\\n//Pragma\\npragma solidity ^0.8.7;\\n//Imports\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"./PriceConverter.sol\\\";\\n//Error codes\\n////Good practice to put the contract name __ and the error\\nerror FundMe__NotOwner();\\n//Interfaces, Libraries, Contracts\\ncontract FundMe {\\n    //Type declarations\\n    using PriceConverter for uint256;\\n    \\n    //State variables\\n    mapping(address => uint256) public s_addressToAmountFunded;\\n    address[] public s_funders;\\n    \\n    address private immutable i_owner;\\n    uint256 public constant minimumUsd = 50 * 10**18;\\n    AggregatorV3Interface public s_priceFeed; //priceFeed it's variable and modularized depending on the chain\\n\\n    modifier onlyOwner {\\n        //require(msg.sender == i_owner, \\\"Sender is not owner!\\\");\\n        if(msg.sender != i_owner) { revert FundMe__NotOwner();}\\n        _;\\n    }\\n\\n    //Functions Order:\\n    //// constructor\\n    //// recieve\\n    //// fallback\\n    //// external\\n    //// public\\n    //// internal\\n    //// private \\n    //// view/pure\\n\\n    constructor(address priceFeedAddress) {\\n        i_owner = msg.sender; //i_owner is going to be whoever deployed this contract\\n        s_priceFeed = AggregatorV3Interface(priceFeedAddress); //we use this for PriceConverter\\n    }\\n\\n    receive() external payable {\\n        fund();\\n    }\\n\\n    fallback() external payable {\\n        fund();\\n    }\\n\\n    /**\\n    * @notice This function funds this contract\\n    * @dev This implements price feeds as our library\\n    */\\n\\n    function fund() public payable{\\n        //Want to be able to set a minimum fund amount in USD\\n        //1. How do we send ETH to this contract?\\n        require(msg.value.getConversionRate(s_priceFeed) >= minimumUsd, \\\"Didn't send enough ETH\\\"); //1e18 == 1 * 10 ** 18 == 1eth\\n        s_funders.push(msg.sender); //msg.sender is a global keyword, msg.value stands for how much native blockchain currency is sent.\\n                                  //msg. sender is the address of whoever calls the font function\\n        s_addressToAmountFunded[msg.sender] = msg.value; //with this, by inserting the address, we get the value he gave\\n    }\\n\\n    function withdraw() public onlyOwner { //withdraw the funds of the s_funders\\n        for (uint256 funderIndex = 0; funderIndex < s_funders.length; funderIndex++) {\\n            address funder = s_funders[funderIndex];\\n            s_addressToAmountFunded[funder] = 0; //when we withdraw, we set the address amount to 0 using the mapping\\n        }\\n        //reset the array\\n        s_funders = new address[](0); //we set it with 0 objects to start);\\n        //actually withdraw the funds\\n        (bool callSuccess, ) = payable(msg.sender).call{value: address(this).balance}(\\\"\\\");\\n        require(callSuccess, \\\"Call failed\\\");\\n    }\\n\\n    //instead, read from funders array in memory one time, and then read from memory instead of storage\\n    function cheaperWithdraw() public payable onlyOwner{\\n        address[] memory funders = s_funders;\\n        //currently, mappings can't be in memory\\n        for(uint256 funderIndex = 0; funderIndex < funders.length; funderIndex++){\\n            address funder = funders[funderIndex];\\n            s_addressToAmountFunded[funder] = 0;\\n        }\\n        s_funders = new address[](0);\\n        (bool success,) = i_owner.call{value:address(this).balance}(\\\"\\\");\\n        require(success);\\n    }\\n\\n    //View/pure\\n\\n    function getOwner() public view returns(address) {\\n        return i_owner;\\n    }\\n\\n    function getFunder(uint256 index) public view returns(address) {\\n        return s_funders[index];\\n    }\\n\\n    function getAddressToAmountFunded(address funder) public view returns(uint256) {\\n        return s_addressToAmountFunded[funder];\\n    }\\n\\n    function getPriceFeed() public view returns(AggregatorV3Interface) {\\n        return s_priceFeed;\\n    }\\n\\n}\\n\\n\",\"keccak256\":\"0xfaa8c9e946bb58a2644b7ef73b6e6c9b8ae1b5db677144784252fac3118c1dfe\",\"license\":\"MIT\"},\"contracts/PriceConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\r\\n\\r\\nlibrary PriceConverter {\\r\\n    function getPrice(AggregatorV3Interface priceFeed) internal view returns(uint256) {\\r\\n        //ABI\\r\\n        //Address\\r\\n        (,int price,,,)=priceFeed.latestRoundData();\\r\\n        //ETH in terms of USD\\r\\n        //2000.00000000\\r\\n        return uint256(price * 1e10); //10000000000 = 10*10\\r\\n    }\\r\\n    function getConversionRate(uint256 ethAmount, AggregatorV3Interface priceFeed) internal view returns(uint256) {\\r\\n        uint256 ethPrice = getPrice(priceFeed);//How much this eth worths in USD\\r\\n        //3000 * 10**18 = ETH/USD PRICE\\r\\n        uint256 ethAmouintInUsd = (ethPrice * ethAmount) / 1e18;\\r\\n        //The (3000 * e18, multiplied by lets say 2ETH (2*e18), and divided by e18) \\r\\n        return ethAmouintInUsd;\\r\\n        //To get something like $6000 * e18 \\r\\n    }\\r\\n}\",\"keccak256\":\"0x75314fb01f9e3dcee5a456f38fe776ed9e887f14a034728244ce398feebf2b59\",\"license\":\"MIT\"}},\"version\":1}",
    "bytecode": "0x60a06040523480156200001157600080fd5b50604051620013c4380380620013c4833981810160405281019062000037919062000120565b3373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b8152505080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505062000152565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000e882620000bb565b9050919050565b620000fa81620000db565b81146200010657600080fd5b50565b6000815190506200011a81620000ef565b92915050565b600060208284031215620001395762000138620000b6565b5b6000620001498482850162000109565b91505092915050565b60805160601c61123e6200018660003960008181610441015281816106c2015281816107120152610908015261123e6000f3fe6080604052600436106100a05760003560e01c806354861af71161006457806354861af7146101a0578063893d20e8146101dd5780639e87a5cd14610208578063b60d428814610233578063be2693f01461023d578063d7b4750c14610247576100af565b80630343fb25146100b9578063098de820146100f65780630ec3b027146101215780631bf6132d1461014c5780633ccfd60b14610189576100af565b366100af576100ad610284565b005b6100b7610284565b005b3480156100c557600080fd5b506100e060048036038101906100db9190610bcc565b6103ac565b6040516100ed9190610c12565b60405180910390f35b34801561010257600080fd5b5061010b6103f4565b6040516101189190610c12565b60405180910390f35b34801561012d57600080fd5b50610136610401565b6040516101439190610c8c565b60405180910390f35b34801561015857600080fd5b50610173600480360381019061016e9190610bcc565b610427565b6040516101809190610c12565b60405180910390f35b34801561019557600080fd5b5061019e61043f565b005b3480156101ac57600080fd5b506101c760048036038101906101c29190610cd3565b61067f565b6040516101d49190610d0f565b60405180910390f35b3480156101e957600080fd5b506101f26106be565b6040516101ff9190610d0f565b60405180910390f35b34801561021457600080fd5b5061021d6106e6565b60405161022a9190610c8c565b60405180910390f35b61023b610284565b005b610245610710565b005b34801561025357600080fd5b5061026e60048036038101906102699190610cd3565b61099e565b60405161027b9190610d0f565b60405180910390f35b6802b5e3af16b18800006102c3600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346109e690919063ffffffff16565b1015610304576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102fb90610d87565b60405180910390fd5b6001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6802b5e3af16b188000081565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60006020528060005260406000206000915090505481565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146104c4576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b60018054905081101561056f576000600182815481106104ea576104e9610da7565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061056790610e05565b9150506104c7565b50600067ffffffffffffffff81111561058b5761058a610e4e565b5b6040519080825280602002602001820160405280156105b95781602001602082028036833780820191505090505b50600190805190602001906105cf929190610ac2565b5060003373ffffffffffffffffffffffffffffffffffffffff16476040516105f690610eae565b60006040518083038185875af1925050503d8060008114610633576040519150601f19603f3d011682016040523d82523d6000602084013e610638565b606091505b505090508061067c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161067390610f0f565b60405180910390fd5b50565b6001818154811061068f57600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610795576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600180548060200260200160405190810160405280929190818152602001828054801561081957602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116107cf575b5050505050905060005b81518110156108a357600082828151811061084157610840610da7565b5b6020026020010151905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061089b90610e05565b915050610823565b50600067ffffffffffffffff8111156108bf576108be610e4e565b5b6040519080825280602002602001820160405280156108ed5781602001602082028036833780820191505090505b5060019080519060200190610903929190610ac2565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff164760405161094a90610eae565b60006040518083038185875af1925050503d8060008114610987576040519150601f19603f3d011682016040523d82523d6000602084013e61098c565b606091505b505090508061099a57600080fd5b5050565b6000600182815481106109b4576109b3610da7565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000806109f283610a22565b90506000670de0b6b3a76400008583610a0b9190610f2f565b610a159190610fb8565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b158015610a6b57600080fd5b505afa158015610a7f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aa39190611076565b5050509150506402540be40081610aba91906110f1565b915050919050565b828054828255906000526020600020908101928215610b3b579160200282015b82811115610b3a5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610ae2565b5b509050610b489190610b4c565b5090565b5b80821115610b65576000816000905550600101610b4d565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610b9982610b6e565b9050919050565b610ba981610b8e565b8114610bb457600080fd5b50565b600081359050610bc681610ba0565b92915050565b600060208284031215610be257610be1610b69565b5b6000610bf084828501610bb7565b91505092915050565b6000819050919050565b610c0c81610bf9565b82525050565b6000602082019050610c276000830184610c03565b92915050565b6000819050919050565b6000610c52610c4d610c4884610b6e565b610c2d565b610b6e565b9050919050565b6000610c6482610c37565b9050919050565b6000610c7682610c59565b9050919050565b610c8681610c6b565b82525050565b6000602082019050610ca16000830184610c7d565b92915050565b610cb081610bf9565b8114610cbb57600080fd5b50565b600081359050610ccd81610ca7565b92915050565b600060208284031215610ce957610ce8610b69565b5b6000610cf784828501610cbe565b91505092915050565b610d0981610b8e565b82525050565b6000602082019050610d246000830184610d00565b92915050565b600082825260208201905092915050565b7f4469646e27742073656e6420656e6f7567682045544800000000000000000000600082015250565b6000610d71601683610d2a565b9150610d7c82610d3b565b602082019050919050565b60006020820190508181036000830152610da081610d64565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610e1082610bf9565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610e4357610e42610dd6565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610e98600083610e7d565b9150610ea382610e88565b600082019050919050565b6000610eb982610e8b565b9150819050919050565b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b6000610ef9600b83610d2a565b9150610f0482610ec3565b602082019050919050565b60006020820190508181036000830152610f2881610eec565b9050919050565b6000610f3a82610bf9565b9150610f4583610bf9565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610f7e57610f7d610dd6565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610fc382610bf9565b9150610fce83610bf9565b925082610fde57610fdd610f89565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b61100881610fe9565b811461101357600080fd5b50565b60008151905061102581610fff565b92915050565b6000819050919050565b61103e8161102b565b811461104957600080fd5b50565b60008151905061105b81611035565b92915050565b60008151905061107081610ca7565b92915050565b600080600080600060a0868803121561109257611091610b69565b5b60006110a088828901611016565b95505060206110b18882890161104c565b94505060406110c288828901611061565b93505060606110d388828901611061565b92505060806110e488828901611016565b9150509295509295909350565b60006110fc8261102b565b91506111078361102b565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211600084136000841316161561114657611145610dd6565b5b817f8000000000000000000000000000000000000000000000000000000000000000058312600084126000841316161561118357611182610dd6565b5b827f800000000000000000000000000000000000000000000000000000000000000005821260008413600084121616156111c0576111bf610dd6565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff05821260008412600084121616156111fd576111fc610dd6565b5b82820290509291505056fea2646970667358221220b9c9de580c4f4b294e11f592fd5291fb79d8170d2146258198564d3d7934671b64736f6c63430008080033",
    "deployedBytecode": "0x6080604052600436106100a05760003560e01c806354861af71161006457806354861af7146101a0578063893d20e8146101dd5780639e87a5cd14610208578063b60d428814610233578063be2693f01461023d578063d7b4750c14610247576100af565b80630343fb25146100b9578063098de820146100f65780630ec3b027146101215780631bf6132d1461014c5780633ccfd60b14610189576100af565b366100af576100ad610284565b005b6100b7610284565b005b3480156100c557600080fd5b506100e060048036038101906100db9190610bcc565b6103ac565b6040516100ed9190610c12565b60405180910390f35b34801561010257600080fd5b5061010b6103f4565b6040516101189190610c12565b60405180910390f35b34801561012d57600080fd5b50610136610401565b6040516101439190610c8c565b60405180910390f35b34801561015857600080fd5b50610173600480360381019061016e9190610bcc565b610427565b6040516101809190610c12565b60405180910390f35b34801561019557600080fd5b5061019e61043f565b005b3480156101ac57600080fd5b506101c760048036038101906101c29190610cd3565b61067f565b6040516101d49190610d0f565b60405180910390f35b3480156101e957600080fd5b506101f26106be565b6040516101ff9190610d0f565b60405180910390f35b34801561021457600080fd5b5061021d6106e6565b60405161022a9190610c8c565b60405180910390f35b61023b610284565b005b610245610710565b005b34801561025357600080fd5b5061026e60048036038101906102699190610cd3565b61099e565b60405161027b9190610d0f565b60405180910390f35b6802b5e3af16b18800006102c3600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346109e690919063ffffffff16565b1015610304576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102fb90610d87565b60405180910390fd5b6001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6802b5e3af16b188000081565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60006020528060005260406000206000915090505481565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146104c4576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b60018054905081101561056f576000600182815481106104ea576104e9610da7565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061056790610e05565b9150506104c7565b50600067ffffffffffffffff81111561058b5761058a610e4e565b5b6040519080825280602002602001820160405280156105b95781602001602082028036833780820191505090505b50600190805190602001906105cf929190610ac2565b5060003373ffffffffffffffffffffffffffffffffffffffff16476040516105f690610eae565b60006040518083038185875af1925050503d8060008114610633576040519150601f19603f3d011682016040523d82523d6000602084013e610638565b606091505b505090508061067c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161067390610f0f565b60405180910390fd5b50565b6001818154811061068f57600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610795576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600180548060200260200160405190810160405280929190818152602001828054801561081957602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116107cf575b5050505050905060005b81518110156108a357600082828151811061084157610840610da7565b5b6020026020010151905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061089b90610e05565b915050610823565b50600067ffffffffffffffff8111156108bf576108be610e4e565b5b6040519080825280602002602001820160405280156108ed5781602001602082028036833780820191505090505b5060019080519060200190610903929190610ac2565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff164760405161094a90610eae565b60006040518083038185875af1925050503d8060008114610987576040519150601f19603f3d011682016040523d82523d6000602084013e61098c565b606091505b505090508061099a57600080fd5b5050565b6000600182815481106109b4576109b3610da7565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000806109f283610a22565b90506000670de0b6b3a76400008583610a0b9190610f2f565b610a159190610fb8565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b158015610a6b57600080fd5b505afa158015610a7f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aa39190611076565b5050509150506402540be40081610aba91906110f1565b915050919050565b828054828255906000526020600020908101928215610b3b579160200282015b82811115610b3a5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610ae2565b5b509050610b489190610b4c565b5090565b5b80821115610b65576000816000905550600101610b4d565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610b9982610b6e565b9050919050565b610ba981610b8e565b8114610bb457600080fd5b50565b600081359050610bc681610ba0565b92915050565b600060208284031215610be257610be1610b69565b5b6000610bf084828501610bb7565b91505092915050565b6000819050919050565b610c0c81610bf9565b82525050565b6000602082019050610c276000830184610c03565b92915050565b6000819050919050565b6000610c52610c4d610c4884610b6e565b610c2d565b610b6e565b9050919050565b6000610c6482610c37565b9050919050565b6000610c7682610c59565b9050919050565b610c8681610c6b565b82525050565b6000602082019050610ca16000830184610c7d565b92915050565b610cb081610bf9565b8114610cbb57600080fd5b50565b600081359050610ccd81610ca7565b92915050565b600060208284031215610ce957610ce8610b69565b5b6000610cf784828501610cbe565b91505092915050565b610d0981610b8e565b82525050565b6000602082019050610d246000830184610d00565b92915050565b600082825260208201905092915050565b7f4469646e27742073656e6420656e6f7567682045544800000000000000000000600082015250565b6000610d71601683610d2a565b9150610d7c82610d3b565b602082019050919050565b60006020820190508181036000830152610da081610d64565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610e1082610bf9565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610e4357610e42610dd6565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610e98600083610e7d565b9150610ea382610e88565b600082019050919050565b6000610eb982610e8b565b9150819050919050565b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b6000610ef9600b83610d2a565b9150610f0482610ec3565b602082019050919050565b60006020820190508181036000830152610f2881610eec565b9050919050565b6000610f3a82610bf9565b9150610f4583610bf9565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610f7e57610f7d610dd6565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610fc382610bf9565b9150610fce83610bf9565b925082610fde57610fdd610f89565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b61100881610fe9565b811461101357600080fd5b50565b60008151905061102581610fff565b92915050565b6000819050919050565b61103e8161102b565b811461104957600080fd5b50565b60008151905061105b81611035565b92915050565b60008151905061107081610ca7565b92915050565b600080600080600060a0868803121561109257611091610b69565b5b60006110a088828901611016565b95505060206110b18882890161104c565b94505060406110c288828901611061565b93505060606110d388828901611061565b92505060806110e488828901611016565b9150509295509295909350565b60006110fc8261102b565b91506111078361102b565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211600084136000841316161561114657611145610dd6565b5b817f8000000000000000000000000000000000000000000000000000000000000000058312600084126000841316161561118357611182610dd6565b5b827f800000000000000000000000000000000000000000000000000000000000000005821260008413600084121616156111c0576111bf610dd6565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff05821260008412600084121616156111fd576111fc610dd6565b5b82820290509291505056fea2646970667358221220b9c9de580c4f4b294e11f592fd5291fb79d8170d2146258198564d3d7934671b64736f6c63430008080033",
    "devdoc": {
        "kind": "dev",
        "methods": {
            "fund()": {
                "details": "This implements price feeds as our library"
            }
        },
        "version": 1
    },
    "userdoc": {
        "kind": "user",
        "methods": {
            "fund()": {
                "notice": "This function funds this contract"
            }
        },
        "version": 1
    },
    "storageLayout": {
        "storage": [
            {
                "astId": 58,
                "contract": "contracts/FundMe.sol:FundMe",
                "label": "s_addressToAmountFunded",
                "offset": 0,
                "slot": "0",
                "type": "t_mapping(t_address,t_uint256)"
            },
            {
                "astId": 61,
                "contract": "contracts/FundMe.sol:FundMe",
                "label": "s_funders",
                "offset": 0,
                "slot": "1",
                "type": "t_array(t_address)dyn_storage"
            },
            {
                "astId": 73,
                "contract": "contracts/FundMe.sol:FundMe",
                "label": "s_priceFeed",
                "offset": 0,
                "slot": "2",
                "type": "t_contract(AggregatorV3Interface)45"
            }
        ],
        "types": {
            "t_address": {
                "encoding": "inplace",
                "label": "address",
                "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
                "base": "t_address",
                "encoding": "dynamic_array",
                "label": "address[]",
                "numberOfBytes": "32"
            },
            "t_contract(AggregatorV3Interface)45": {
                "encoding": "inplace",
                "label": "contract AggregatorV3Interface",
                "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_uint256)": {
                "encoding": "mapping",
                "key": "t_address",
                "label": "mapping(address => uint256)",
                "numberOfBytes": "32",
                "value": "t_uint256"
            },
            "t_uint256": {
                "encoding": "inplace",
                "label": "uint256",
                "numberOfBytes": "32"
            }
        }
    }
}
